name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  build-android:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          openjdk-11-jdk \
          python3-pip \
          python3-dev \
          python3-setuptools \
          libffi-dev \
          libssl-dev \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          ccache
    
    - name: Set JAVA_HOME
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
        echo "PATH=$PATH:/usr/lib/jvm/java-11-openjdk-amd64/bin" >> $GITHUB_ENV
    
    - name: Setup Android SDK
      run: |
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p $HOME/android-sdk/cmdline-tools
        mv cmdline-tools $HOME/android-sdk/cmdline-tools/latest
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
        yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-30" "build-tools;30.0.3" "platform-tools"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        python -m pip install buildozer cython==0.29.33
        python -m pip install kivy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-global-
    
    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
    
    - name: Initialize Buildozer
      run: |
        buildozer init || echo "Buildozer already initialized"
    
    - name: Build Android APK
      run: |
        buildozer android debug
      env:
        GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxPermSize=512m"
    
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-debug
        path: bin/*.apk
        retention-days: 30
    
    - name: List generated files (for debugging)
      run: |
        echo "Contents of bin directory:"
        ls -la bin/ || echo "No bin directory found"
        echo "Contents of .buildozer directory:"
        ls -la .buildozer/ || echo "No .buildozer directory found"
    
    # Optional: Create a release if this is a tagged commit
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
